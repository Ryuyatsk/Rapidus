#!/usr/bin/env php
<?php
/**
 * Created by IntelliJ IDEA.
 * User: syo
 * Date: 2018/03/19
 * Time: 23:13
 */

class Artisan
{
    public function index()
    {
        global $argv;
        global $argc;
        $pieces = explode(":", $argv[1]);
        if ($pieces[0] === 'make') {
            if (count($pieces) !== 2) {
                print("書式が間違っています。\n");
                exit;
            }
            if ($argc < 3) {
                print("引数が足りません\n");
                exit;
            }
            $this->make($pieces[1], $argv[2]);
        } elseif ($pieces[0] === 'setUp') {
            $this->setUp();
        }
    }

    public function make($part, $fileName)
    {
        switch ($part) {
            case 'Component':
                (new Component($fileName))->make();
                break;
            case "Di":
                (new Di($fileName))->make();
                break;
            case 'Repository':
                (new Repository($fileName))->make();
                break;
            case 'View':
                (new View($fileName))->make();
                break;
        }
    }

    public function setUp()
    {
        (new SetUp())->index();
    }
}

class Component
{
    private $componentFile;
    private $componentName;

    public function __construct($fileName)
    {
        $this->componentName = ucfirst($fileName) . 'Component';
        $fileName = ucfirst($fileName) . 'Component.js';
        $this->componentFile = __DIR__ . "/Component/{$fileName}";
    }

    public function make()
    {
        if (!touch($this->componentFile)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        $fp = fopen($this->componentFile, 'w');
        fwrite($fp, (new Heredoc())->getComponent($this->componentName));
        fclose($fp);
    }
}

class View
{
    private $viewFile;
    private $viewName;

    public function __construct($fileName)
    {
        $this->viewName = ucfirst($fileName) . 'View';
        $fileName = ucfirst($fileName) . 'View.js';
        $this->viewFile = __DIR__ . "/Views/{$fileName}";
    }

    public function make()
    {
        if (!touch($this->viewFile)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        $fp = fopen($this->viewFile, 'w');
        fwrite($fp, (new Heredoc())->getView($this->viewName));
        fclose($fp);
    }
}

class SetUp
{
    private $component;
    private $di;
    private $repository;
    private $view;
    private $routing;

    public function __construct()
    {
        $this->component = __DIR__ . '/Component';
        $this->di = __DIR__ . '/Di';
        $this->repository = __DIR__ . '/Repository';
        $this->view = __DIR__ . '/Views';
        $this->routing = __DIR__ . '/Routing.js';
    }

    public function index()
    {
        $this->makeDir();
        $this->makeRouting();
        (new View('Home'))->make();
    }

    public function makeDir()
    {
        if (!mkdir($this->component, 0777, true)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        if (!mkdir($this->di, 0777, true)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        if (!mkdir($this->repository, 0777, true)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        if (!mkdir($this->view, 0777, true)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
    }

    public function makeRouting()
    {
        if (!touch($this->routing)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        $fp = fopen($this->routing, 'w');
        fwrite($fp, (new Heredoc())->getRouting());
        fclose($fp);
    }
}

class Repository
{
    private $repositoryFile;
    private $repositoryName;

    public function __construct($fileName)
    {
        $this->repositoryName = ucfirst($fileName) . 'Repository';
        $fileName = ucfirst($fileName) . 'Repository.js';
        $this->repositoryFile = __DIR__ . "/Repository/{$fileName}";
    }

    public function make()
    {
        if (!touch($this->repositoryFile)) {
            print("正常に実行できなかったため、処理を中断します。\n");
            exit;
        }
        $fp = fopen($this->repositoryFile, 'w');
        fwrite($fp, (new Heredoc())->getRepository($this->repositoryName));
        fclose($fp);
    }
}

class Di
{
    private $diFile;
    private $diName;

    public function __construct($fileName)
    {
        $this->diName = ucfirst($fileName) . 'Repository';
        $fileName = ucfirst($fileName) . 'Repository.js';
        $this->diFile = __DIR__ . "/Repository/{$fileName}";
    }

    public function make()
    {
        print("まだ実装していません。処理を終了します。\n");
        exit;
    }
}

$routingFile = <<< EOF
import React from 'react';
import {StackNavigator, TabNavigator, DrawerNavigator, NavigationActions} from 'react-navigation';
import HomeView from './Views/HomeView';

export const RootStack = StackNavigator({
    Home: {
        screen: HomeView,
    },
});

EOF;


class Heredoc
{
    public function getRouting()
    {
        global $routingFile;
        return $routingFile;
    }

    public function getComponent($componentName)
    {
        $componentFile = <<< EOF
import React from 'react';
import {Text, View, Image, StyleSheet, TouchableOpacity} from 'react-native';

export default class {$componentName} extends React.Component {
    static navigationOptions = {
        headerTitle: <Text style={{flex: 1, fontSize: 18, textAlign: 'center'}}>{$componentName}</Text>,
        headerTitleStyle: {
            alignSelf: 'center'
        },
        tabBarVisible: true,
    };

    render() {
        return (
            <View style={styles.container}>
                <Text>Sample</Text>
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    }, header: {
        flex: 1,
        fontSize: 18,
    },
});

EOF;

        return $componentFile;
    }

    public function getRepository($repositoryName)
    {
        $repositoryFile = <<< EOF
import axios from 'axios';

export default class {$repositoryName} {
    constructor(This) {
        this.this = This;
    }

    onClick() {
        axios.get('')
            .then(function (response) {
                let res = new Object(response['data']);
                this.setState({"res": res});
            }.bind(this));
    }
}

EOF;

        return $repositoryFile;
    }

    public function getView($viewName)
    {
        $componentFile = <<< EOF
import React from 'react';
import {Text, View, Image, StyleSheet, TouchableOpacity} from 'react-native';

export default class {$viewName} extends React.Component {
    static navigationOptions = {
        headerTitle: <Text style={{flex: 1, fontSize: 18, textAlign: 'center'}}>{$viewName}</Text>,
        headerTitleStyle: {
            alignSelf: 'center'
        },
        tabBarVisible: true,
    };

    render() {
        return (
            <View style={styles.container}>
                <Text>Sample</Text>
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    }, header: {
        flex: 1,
        fontSize: 18,
    },
});

EOF;

        return $componentFile;
    }

}


/***************************************************/

if ($argc < 2) {
    print("引数が足りません\n");
    exit;
}

(new Artisan())->index();

$app = <<< EOF
import React from 'react';
import {RootStack} from './Routing';

export default class App extends React.Component {
    render() {
        return <RootStack/>;
    }
}

EOF;

if ($argv[1] === 'setUp') {
    exec('npm install --save axios react-navigation');
    exec('npm install');
    echo "無事にジェネレータを実行できました。\n\n";
    echo $app;
}

echo pack('c',0x1B) . "[1;34m" . "処理が正常に終了しました" . pack('c',0x1B) . "[0m\n";
